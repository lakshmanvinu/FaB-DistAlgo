import sys
import fab
from prettytable import PrettyTable

def generate_config(prop_ids, acc_ids, lrn_ids):
    
    config = dict()
    leader_conf = [{acc_ids[0], acc_ids[1], acc_ids[2]},{acc_ids[3], acc_ids[0]}]
    acceptor_conf = [{ acc_ids[0]:[acc_ids[1]], acc_ids[1]:[], acc_ids[2]:[acc_ids[1]], acc_ids[3]:[] }, 
                    { acc_ids[0]:[], acc_ids[1]:[], acc_ids[2]:[], acc_ids[3]:[] }]
    byzconf = {prop_ids[0]:0,prop_ids[1]:3,prop_ids[2]:3,prop_ids[3]:3}
    acc_rep_from = {acc_ids[0], acc_ids[1], acc_ids[3]}
    config["leader_config"] = {"propose_to": leader_conf}
    config["proposer_config"] = {"byzpropconf":byzconf}
    config["acceptor_config"] = {"accept_to": acceptor_conf, "rep_from":acc_rep_from}

    return config

def main():
    """
    The main method for the class that drives Byzantine behaviour in the system.
    This is used to spawn Proposer, Acceptor and Learner processes 
    for the implementation. 
    Arguments for the number of proposers, acceptors, learners and byzantine processes
    will be specified during runtime.
    """
    f = int(sys.argv[1]) if len(sys.argv) > 1 else 1
    p = int(sys.argv[2]) if len(sys.argv) > 2 else 4
    a = int(sys.argv[3]) if len(sys.argv) > 3 else 4
    l = int(sys.argv[4]) if len(sys.argv) > 4 else 4
    lt = 20

    leaderelect = new(fab.Election)
    proposers = new(fab.Proposer, num=p)
    acceptors = new(fab.Acceptor, num=a)
    learners = new(fab.Learner, num=l)
    mode = 4
    proplist = list(proposers)
    acclist = list(acceptors)
    learnlist = list(learners)

    config = generate_config(proplist, acclist, learnlist)
    print('\n')
    print(config)

    print('\n')
    print('-'*95)
    print('#'*29, 'REPRODUCTION OF LIVENESS VIOLATION', '#'*29)
    print('-'*95)
    table = PrettyTable(['Type of process','1', '2', '3', '4'])
    lc = ['Proposers']
    for prop in proplist:
        lc.append(prop)
    table.add_row(lc)
    lc = ['Acceptors']
    for acc in acclist:
        lc.append(acc)
    table.add_row(lc)
    lc = ['Learners']
    for lrns in learnlist:
        lc.append(lrns)
    table.add_row(lc)
    print(table)
    print('\n')

    setup(leaderelect,(proplist, acceptors, p, f, mode, None))
    for proposer in proposers:
        setup(proposer, (proposers-{proposer}, learners, acceptors, leaderelect, p, a, l, f, mode, config, None))
    for acceptor in acceptors:
        setup(acceptor, (learners, acceptors-{acceptor}, leaderelect, a, f, mode, config, None))
    for learner in learners:
        setup(learner, (proposers, acceptors, learners-{learner}, a, f, lt, mode, config, None))

    start(proposers)
    start(leaderelect)
    start(acceptors)
    start(learners)

    await(each(learner in learners, has=received(('done'), from_=learner)))
    send(('done'), to=proposers|acceptors|learners)
    send(('done'), to=leaderelect)