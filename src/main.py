# -*- generated by 1.1.0b13 -*-
import da
PatternExpr_355 = da.pat.ConstantPattern('done')
PatternExpr_359 = da.pat.BoundPattern('_BoundPattern360_')
PatternExpr_361 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern367_')]), da.pat.ConstantPattern('done')])
_config_object = {}
import sys
# import fab

class Main():

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_355, sources=[PatternExpr_359], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        """
        The main method which is used to spawn Proposer, Acceptor and Learner processes 
        for the implementation. 
        Arguments for the number of proposers, acceptors, learners and byzantine processes
        will be specified during runtime.
        """
        f = (int(sys.argv[1]) if (len(sys.argv) > 1) else 1)
        p = (int(sys.argv[2]) if (len(sys.argv) > 2) else 4)
        a = (int(sys.argv[3]) if (len(sys.argv) > 3) else 6)
        l = (int(sys.argv[4]) if (len(sys.argv) > 4) else 4)
        leaderelect = self.new(fab.Election)
        proposers = self.new(fab.Proposer, num=p)
        acceptors = self.new(fab.Acceptor, num=a)
        learners = self.new(fab.Learner, num=l)
        mode = 1
        self._setup(leaderelect, (proposers, acceptors, p, f, mode, None))
        for proposer in proposers:
            self._setup(proposer, ((proposers - {proposer}), learners, acceptors, leaderelect, p, a, l, f, mode, None, None))
        for acceptor in acceptors:
            self._setup(acceptor, (learners, (acceptors - {acceptor}), leaderelect, a, f, mode, None, None))
        for learner in learners:
            self._setup(learner, (proposers, acceptors, (learners - {learner}), a, f, mode, None, None))
        self._start(proposers)
        self._start(leaderelect)
        self._start(acceptors)
        self._start(learners)
        super()._label('_st_label_347', block=False)
        learner = None

        def UniversalOpExpr_348():
            nonlocal learner
            for learner in learners:
                if (not PatternExpr_361.match_iter(self._Node_ReceivedEvent_0, _BoundPattern367_=learner)):
                    return False
            return True
        _st_label_347 = 0
        while (_st_label_347 == 0):
            _st_label_347 += 1
            if UniversalOpExpr_348():
                _st_label_347 += 1
            else:
                super()._label('_st_label_347', block=True)
                _st_label_347 -= 1
        self.send('done', to=((proposers | acceptors) | learners))
        self.send('done', to=leaderelect)
